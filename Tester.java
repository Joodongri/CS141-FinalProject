package edu.cpp.cs.cs141.FinalProject;

/**
 * This is a class to test the program. Delete this class once the project is finished.
 * @author Team 404
 *
 */
public class Tester {

	public static void main(String[] args) {
		Grid g = new Grid();
		
		System.out.println("This is the initial state of the grid:\n");
		System.out.print(g.getGrid());
		
		g.toggleDebug();
		
		System.out.println("\nAnd this is the same grid with open visibility:\n");
		System.out.print(g.getGrid());
	}

	
	/*
	 * **************CHANGE LOG*****************
	 * 		as of 11.7.17 by Joel Tengco
	 * 
	 * Modifications to classes Bullet, Enemy, Grid, GridObject, Item, Player, Radar, Room, Star
	 * -GridObject and all of its subclasses now have a field of type char named mark in which
	 * 	represents the mark it will have on the grid, they also have a field of type boolean in which
	 * 	represents whether or not they are visible on the grid. They also now have a method called getMark()
	 * 	that made the getGrid() method in class Grid easier to implement. My intention is to have:
	 * 	UI print the string returned by Engine's displayGrid() method and that displayGrid() method
	 * 	would return the string generated by Grid's getGrid() method. The point is that UI is
	 * 	handling the printing instead of Engine and Grid.
	 * 
	 * -Class Grid's displayGrid() method has turned into getGrid() for clarity. generalGridSetup()
	 * 	now has a loop that fills in the null elements in the array with objects of type GridObject,
	 * 	the point being that these objects have field secret == ObjectType.DEFAULT, in which defines
	 * 	these squares as empty, appearing as [ ] on the grid. enemySetup() was somehow making my cpu
	 * 	run on 100% while debugging at one point for some reason so I decided to implement it another way.
	 * 	I figured out that it was somehow processing an infinite loop when I changed the square the player
	 * 	initially spawned on to column 8, row 0. The new methods I have defined are:
	 * 	getGrid(), setAdjacentVisible(), resetVisibility() and getGridDebug().
	 * 	Comments should be able to explain all of those methods but feel free to ask if anything is unclear.
	 * 
	 * ***************READ BELOW***************
	 * -grid[col][row] vs grid[row][col]
	 * 	Now, I am used to implementing 2D arrays similar to how matrices are imagined where rows come first before columns.
	 * 	This of course goes against how this whole project has been defined thus far. I tried to comply with it, but I had major
	 * 	problems trying to implement the getGrid() method that builds a string according to elements of the grid from left to right,
	 * 	top to bottom. With grid[col][row] I was getting basically the transpose of the matrix, where rows and columns are switched,
	 * 	and thus the room numbers were going vertically instead of horizontally. In this version, I have went through changing every
	 * 	single occurrence of col coming first before row to row being first before col. It was a lot to change. And so I may be the
	 * 	only one wanting this change. So if you believe you can work on this project better with how it was previously with col first
	 * 	before row, then I will gladly try to redefine getGrid() to fit that requirement.
	 */
}
